kind: Template
apiVersion: v1
metadata:
  annotations:
    iconClass: icon-eap
    tags: eap,javaee,java,jboss
  name: prbz-eap73-basic-s2i
labels:
  template: prbz-eap73-basic-s2i
parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: prbz-overview
  required: true
- displayName: EAP Image Name
  description: 'Name of the EAP image to use, example: eap73-openjdk11-openshift-rhel8'
  name: EAP_IMAGE_NAME
  value: eap73-openjdk11-openshift-rhel8:latest
  required: true
- displayName: EAP Runtime Image Name
  description: 'Name of the EAP image to use, example: eap73-openjdk11-runtime-openshift-rhel8'
  name: EAP_RUNTIME_IMAGE_NAME
  value: eap73-openjdk11-runtime-openshift-rhel8:latest
  required: true
- displayName: Git Repository URL
  description: Git source URI for application
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/jboss-set/prbz-overview.git
  required: true
- displayName: Git Reference
  description: Git branch/tag reference
  name: SOURCE_REPOSITORY_REF
  # FIX ME
  #value: master
  value: openshift
  required: false
- displayName: Galleon layers
  description: Comma separated list of Galleon layers to provision a server.
  name: GALLEON_PROVISION_LAYERS
  required: false
- displayName: AMQ cluster password
  description: AMQ cluster admin password
  name: MQ_CLUSTER_PASSWORD
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: Github Webhook Secret
  description: GitHub trigger secret
  name: GITHUB_WEBHOOK_SECRET
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: Generic Webhook Secret
  description: Generic build trigger secret
  name: GENERIC_WEBHOOK_SECRET
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  value: jboss-set-psi
  required: true
- displayName: JGroups Cluster Password
  description: JGroups cluster password
  name: JGROUPS_CLUSTER_PASSWORD
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: Deploy Exploded Archives
  description: Controls whether exploded deployment content should be automatically
    deployed
  name: AUTO_DEPLOY_EXPLODED
  value: 'false'
  required: false
- displayName: Maven Additional Arguments
  description: Maven additional arguments to use for S2I builds
  name: MAVEN_ARGS_APPEND
  value: "-Dcom.redhat.xpaas.repo.jbossorg -Dnorpm"
  required: true
- description: Container cpu limit
  name: CPU_LIMIT
  value: "1"
  required: false
- description: Container cpu request
  name: CPU_REQUEST
  value: "1"
  required: false
- description: Container memory limit
  name: MEMORY_LIMIT
  value: "1Gi"
  required: false
- description: Container memory request
  name: MEMORY_REQUEST
  value: "512Mi"
  required: false
objects:
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The web server's http port.
- kind: Service
  apiVersion: v1
  spec:
    publishNotReadyAddresses: true
    clusterIP: None
    ports:
    - name: ping
      port: 8888
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
  metadata:
    name: "${APPLICATION_NAME}-ping"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
      description: The JGroups ping port for clustering.
- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-https"
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's https service.
  spec:
    to:
      name: "${APPLICATION_NAME}"
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-build-artifacts"
    labels:
      application: "${APPLICATION_NAME}"
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-build-artifacts"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
    strategy:
      type: Source
      sourceStrategy:
        env:
        - name: MAVEN_ARGS_APPEND
          value: "${MAVEN_ARGS_APPEND}"
        - name: GALLEON_PROVISION_LAYERS
          value: "${GALLEON_PROVISION_LAYERS}"
        - name: GALLEON_PROVISION_DEFAULT_FAT_SERVER
          value: 'true'
        forcePull: true
        incremental: true
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_STREAM_NAMESPACE}"
          name: "${EAP_IMAGE_NAME}"
        pullSecret:
          name: a-new-pull-secret-pull-secret
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}-build-artifacts:latest"
    triggers:
    - type: GitHub
      github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
    - type: Generic
      generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      application: "${APPLICATION_NAME}"
    name: "${APPLICATION_NAME}"
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    source:
      dockerfile: |-
        FROM ${EAP_RUNTIME_IMAGE_NAME}
        COPY /server $JBOSS_HOME
        USER root
        ADD https://password.corp.redhat.com/RH-IT-Root-CA.crt /etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt
        RUN update-ca-trust
        RUN chown -R jboss:root $JBOSS_HOME && chmod -R ug+rwX $JBOSS_HOME
        USER jboss
        CMD $JBOSS_HOME/bin/openshift-launch.sh
      images:
      - from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}-build-artifacts:latest"
        paths:
        - sourcePath: "/s2i-output/server/"
          destinationDir: "."
    strategy:
      dockerStrategy:
        imageOptimizationPolicy: SkipLayers
        from:
          kind: ImageStreamTag
          name: "${EAP_RUNTIME_IMAGE_NAME}"
          namespace: "${IMAGE_STREAM_NAMESPACE}"
        pullSecret:
          name: a-new-pull-secret-pull-secret
      type: Docker
    triggers:
    - type: ImageChange
      imageChange:
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}-build-artifacts:latest"
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        name: "${APPLICATION_NAME}"
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
          application: "${APPLICATION_NAME}"
      spec:
        terminationGracePeriodSeconds: 75
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          imagePullPolicy: Always
          envFrom:
          - configMapRef:
              name: "prbz-overview-config"
          volumeMounts:
          - name: "config-volume"
            mountPath: "/etc/config"
          - name: "secret-volume"
            mountPath: "/etc/secret"
          - name: "pvol"
            mountPath: "/home/jboss/github-cache"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
              cpu: "${CPU_LIMIT}"
            requests:
              memory: "${MEMORY_REQUEST}"
              cpu: "${CPU_REQUEST}"
          livenessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/livenessProbe.sh"
            initialDelaySeconds: 60
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/readinessProbe.sh"
            initialDelaySeconds: 10
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: ping
            containerPort: 8888
            protocol: TCP
          env:
          - name: JGROUPS_PING_PROTOCOL
            value: dns.DNS_PING
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: "${APPLICATION_NAME}-ping"
          - name: OPENSHIFT_DNS_PING_SERVICE_PORT
            value: '8888'
          - name: MQ_CLUSTER_PASSWORD
            value: "${MQ_CLUSTER_PASSWORD}"
          - name: JGROUPS_CLUSTER_PASSWORD
            value: "${JGROUPS_CLUSTER_PASSWORD}"
          - name: AUTO_DEPLOY_EXPLODED
            value: "${AUTO_DEPLOY_EXPLODED}"
          - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
            value: "${ENABLE_GENERATE_DEFAULT_DATASOURCE}"
        volumes:
        - name: config-volume
          configMap:
            name: "prbz-overview-config"
        - name: secret-volume
          secret:
            secretName: "aphrodite-secret"
        - name: pvol
          persistentVolumeClaim:
            claimName: "prbz-overview-pvc"
